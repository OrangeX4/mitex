
#import "../prelude.typ": *

#let spec = (
  // Spaces: \! \, \> \: \; \ \quad \qquad
  "!": define-sym("negthinspace"),
  negthinspace: sym,
  negmedspace: sym,
  negthickspace: sym,
  ",": define-sym("thin"),
  thinspace: define-sym("thin"),
  ">": define-sym("med"),
  ":": define-sym("med"),
  medspace: define-sym("med"),
  ";": define-sym("thick"),
  "": define-sym("thick"),
  thickspace: define-sym("thick"),
  enspace: sym,
  nobreakspace: define-sym("space.nobreak"),
  quad: sym,
  qquad: define-sym("wide"),
  phantom: cmd1,
  hphantom: cmd1,
  vphantom: cmd1,
  // Escape symbols
  "_": define-sym("\\_"),
  "^": define-sym("hat"),
  "|": define-sym("||"),
  "&": define-sym("amp"),
  "#": define-sym("hash"),
  "%": define-sym("percent"),
  "$": define-sym("dollar"),
  "{": define-sym("{"),
  "}": define-sym("}"),
  lparen: define-sym("paren.l"),
  rparen: define-sym("paren.r"),
  lceil: define-sym(" ⌈ "),
  rceil: define-sym("⌉ "),
  lfloor: define-sym("⌊ "),
  rfloor: define-sym("⌋"),
  // Sizes and styles
  displaystyle: define-greedy-cmd("mitexdisplay"),
  textstyle: define-greedy-cmd("mitexinline"),
  scriptstyle: define-greedy-cmd("mitexscript"),
  scriptscriptstyle: define-greedy-cmd("mitexsscript"),
  bf: define-greedy-cmd("mitexbold"),
  rm: define-greedy-cmd("mitexupright"),
  it: define-greedy-cmd("mitexitalic"),
  sf: define-greedy-cmd("mitexsans"),
  frak: define-greedy-cmd("mitexfrak"),
  tt: define-greedy-cmd("mitexmono"),
  cal: define-greedy-cmd("mitexcal"),
  bold: define-cmd(1, alias: "bold"),
  mathbf: define-cmd(1, alias: "bold"),
  boldsymbol: define-cmd(1, alias: "bold"),
  mathrm: define-cmd(1, alias: "upright"),
  mathit: define-cmd(1, alias: "italic"),
  mathsf: define-cmd(1, alias: "sans"),
  mathfrak: define-cmd(1, alias: "frak"),
  mathtt: define-cmd(1, alias: "mono"),
  mathbb: define-cmd(1, alias: "bb"),
  mathcal: define-cmd(1, alias: "cal"),
  // todo: \big \Big need to accept paren as arg like "\big("
  // Now just ignore them
  big: define-sym(""),
  Big: define-sym(""),
  bigg: define-sym(""),
  Bigg: define-sym(""),
  bigl: define-sym(""),
  Bigl: define-sym(""),
  biggl: define-sym(""),
  Biggl: define-sym(""),
  bigm: define-sym(""),
  Bigm: define-sym(""),
  biggm: define-sym(""),
  Biggm: define-sym(""),
  bigr: define-sym(""),
  Bigr: define-sym(""),
  biggr: define-sym(""),
  Biggr: define-sym(""),
  Huge: define-sym(""),
  normalsize: define-sym(""),
  huge: define-sym(""),
  small: define-sym(""),
  footnotesize: define-sym(""),
  Large: define-sym(""),
  scriptsize: define-sym(""),
  large: define-sym(""),
  tiny: define-sym(""),
  // Colors
  color: define-greedy-cmd("mitexcolor"),
  textcolor: define-cmd(2, alias: "colortext"),
  colorbox: cmd2,
  // Limits
  limits: left1-op,
  
  nolimits: (
    kind: "cmd",
    args: ( kind: "left1" ),
    alias: "scripts",
  ),
  // Commands
  frac: define-cmd(2),
  cfrac: define-cmd(2),
  dfrac: define-cmd(2),
  tfrac: define-cmd(2),
  binom: define-cmd(2),
  stackrel: define-cmd(2),
  overset: define-cmd(2),
  underset: define-cmd(2),
  // Accents
  "not": define-cmd(1, alias: "cancel"),
  grave: define-cmd(1, alias: "grave"),
  acute: define-cmd(1, alias: "acute"),
  hat: define-cmd(1, alias: "hat"),
  tilde: define-cmd(1, alias: "tilde"),
  bar: define-cmd(1, alias: "macron"),
  breve: define-cmd(1, alias: "breve"),
  dot: define-cmd(1, alias: "dot"),
  ddot: define-cmd(1, alias: "dot.double"),
  dddot: define-cmd(1, alias: "dot.triple"),
  ddddot: define-cmd(1, alias: "dot.quad"),
  H: define-cmd(1, alias: "acute.double"),
  v: define-cmd(1, alias: "caron"),
  vec: define-cmd(1, alias: "arrow"),
  overrightarrow: define-cmd(1, alias: "arrow"),
  overleftarrow: define-cmd(1, alias: "arrow.l"),
  overline: cmd1,
  underline: cmd1,
  overbrace: define-cmd(1, alias: "mitexoverbrace"),
  underbrace: define-cmd(1, alias: "mitexunderbrace"),
  overbracket: define-cmd(1, alias: "mitexoverbracket"),
  underbracket: define-cmd(1, alias: "mitexunderbracket"),
  // Greeks
  alpha: sym,
  beta: sym,
  gamma: sym,
  delta: sym,
  epsilon: sym,
  zeta: sym,
  eta: sym,
  theta: sym,
  iota: sym,
  kappa: sym,
  lambda: sym,
  mu: sym,
  nu: sym,
  xi: sym,
  omicron: sym,
  pi: sym,
  rho: sym,
  sigma: sym,
  tau: sym,
  upsilon: sym,
  phi: sym,
  chi: sym,
  psi: sym,
  omega: sym,
  Alpha: sym,
  Beta: sym,
  Gamma: sym,
  Delta: sym,
  Epsilon: sym,
  Zeta: sym,
  Eta: sym,
  Theta: sym,
  Iota: sym,
  Kappa: sym,
  Lambda: sym,
  Mu: sym,
  Nu: sym,
  Xi: sym,
  Omicron: sym,
  Pi: sym,
  Rho: sym,
  Sigma: sym,
  Tau: sym,
  Upsilon: sym,
  Phi: sym,
  Chi: sym,
  Psi: sym,
  Omega: sym,
  varbeta: define-sym("beta.alt"),
  varepsilon: define-sym("epsilon.alt"),
  varkappa: define-sym("kappa.alt"),
  varphi: define-sym("phi.alt"),
  varpi: define-sym("pi.alt"),
  varrho: define-sym("rho.alt"),
  varsigma: define-sym("sigma.alt"),
  vartheta: define-sym("theta.alt"),
  ell: sym,
  // Function symbols
  sin: sym,
  cos: sym,
  tan: sym,
  cot: sym,
  sec: sym,
  csc: sym,
  arcsin: sym,
  arccos: sym,
  arctan: sym,
  sinh: sym,
  cosh: sym,
  tanh: sym,
  coth: sym,
  ln: sym,
  log: sym,
  lg: sym,
  lim: sym,
  limsup: sym,
  liminf: sym,
  hom: sym,
  det: sym,
  exp: sym,
  deg: sym,
  gcd: sym,
  lcm: sym,
  dim: sym,
  ker: sym,
  arg: sym,
  Pr: sym,
  // Limits
  max: sym,
  min: sym,
  argmax: sym,
  argmin: sym,
  sup: sym,
  inf: sym,
  sum: sym,
  prod: define-sym("product"),
  int: define-sym("integral"),
  iint: define-sym("integral.double"),
  iiint: define-sym("integral.triple"),
  oint: define-sym("integral.cont"),
  oiint: define-sym("integral.surf"),
  oiiint: define-sym("integral.vol"),
  // Symbols
  mod: define-sym("mod"),
  bmod: define-sym("mod"),
  cdot: define-sym("dot.c"),
  times: define-sym("times"),
  oplus: define-sym("plus.circle"),
  ominus: define-sym("minus.circle"),
  pm: define-sym("plus.minus"),
  plusmn: define-sym("plus.minus"),
  mp: define-sym("minus.plus"),
  div: define-sym("div"),
  star: define-sym("star"),
  cap: define-sym("sect"),
  cup: define-sym("union"),
  "in": define-sym("in"),
  notin: define-sym("in.not"),
  subset: define-sym("subset"),
  subseteq: define-sym("subset.eq"),
  ne: define-sym("!="),
  neq: define-sym("!="),
  lt: define-sym("<"),
  gt: define-sym(">"),
  le: define-sym("<="),
  ge: define-sym(">="),
  leq: define-sym("<="),
  geq: define-sym(">="),
  leqslant: define-sym("lt.eq.slant"),
  geqslant: define-sym("gt.eq.slant"),
  approx: define-sym("approx"),
  leftarrow: define-sym("<-"),
  rightarrow: define-sym("->"),
  leftrightarrow: define-sym("<->"),
  Leftarrow: define-sym("arrow.l.double"),
  Rightarrow: define-sym("=>"),
  Leftrightarrow: define-sym("<=>"),
  larr: define-sym("<-"),
  rarr: define-sym("->"),
  lrarr: define-sym("<->"),
  lArr: define-sym("arrow.l.double"),
  rArr: define-sym("=>"),
  lrArr: define-sym("<=>"),
  Larr: define-sym("arrow.l.double"),
  Rarr: define-sym("=>"),
  Lrarr: define-sym("<=>"),
  longleftarrow: define-sym("<--"),
  longrightarrow: define-sym("-->"),
  longleftrightarrow: define-sym("<-->"),
  Longleftarrow: define-sym("<=="),
  Longrightarrow: define-sym("==>"),
  Longleftrightarrow: define-sym("<==>"),
  to: define-sym("->"),
  gets: define-sym("<-"),
  mapsto: define-sym("|->"),
  infty: define-sym("oo"),
  lbrack: define-sym("bracket.l"),
  rbrack: define-sym("bracket.r"),
  angle: define-sym("angle"),
  langle: define-sym("angle.l"),
  rangle: define-sym("angle.r"),
  measuredangle: define-sym("angle.arc"),
  sphericalangle: define-sym("angle.spheric"),
  ast: define-sym("ast"),
  circledast: define-sym("ast.circle"),
  backslash: define-sym("backslash"),
  dagger: define-sym("dagger"),
  ddagger: define-sym("dagger.double"),
  circleddash: define-sym("dash.circle"),
  odot: define-sym("dot.circle"),
  bigodot: define-sym("dot.circle.big"),
  boxdot: define-sym("dot.square"),
  dots: define-sym("dots.h"),
  cdots: define-sym("dots.h.c"),
  ldots: define-sym("dots.h"),
  vdots: define-sym("dots.v"),
  ddots: define-sym("dots.down"),
  sim: define-sym("tilde"),
  simeq: define-sym("tilde.eq"),
  backsimeq: define-sym("tilde.eq.rev"),
  cong: define-sym("tilde.equiv"),
  ncong: define-sym("tilde.equiv.not"),
  nsim: define-sym("tilde.not"),
  backsim: define-sym("tilde.rev"),
  prime: define-sym("prime"),
  backprime: define-sym("prime.rev"),
  bigoplus: define-sym("plus.circle.big"),
  dotplus: define-sym("plus.dot"),
  boxplus: define-sym("plus.square"),
  boxminus: define-sym("minus.square"),
  eqsim: define-sym("minus.tilde"),
  otimes: define-sym("times.circle"),
  bigotimes: define-sym("times.circle.big"),
  divideontimes: define-sym("times.div"),
  leftthreetimes: define-sym("times.three.l"),
  rightthreetimes: define-sym("times.three.r"),
  ltimes: define-sym("times.l"),
  rtimes: define-sym("times.r"),
  boxtimes: define-sym("times.square"),
  triangleq: define-sym("eq.delta"),
  curlyeqprec: define-sym("eq.prec"),
  curlyeqsucc: define-sym("eq.succ"),
  gtrdot: define-sym("gt.dot"),
  gg: define-sym("gt.double"),
  gtreqless: define-sym("gt.eq.lt"),
  ngeq: define-sym("gt.eq.not"),
  geqq: define-sym("gt.equiv"),
  gtrless: define-sym("gt.lt"),
  gneqq: define-sym("gt.nequiv"),
  ngtr: define-sym("gt.not"),
  gnsim: define-sym("gt.ntilde"),
  gtrsim: define-sym("gt.tilde"),
  vartriangleright: define-sym("gt.tri"),
  trianglerighteq: define-sym("gt.tri.eq"),
  ntrianglerighteq: define-sym("gt.tri.eq.not"),
  ntriangleright: define-sym("gt.tri.not"),
  ggg: define-sym("gt.triple"),
  lessdot: define-sym("lt.dot"),
  ll: define-sym("lt.double"),
  lesseqgtr: define-sym("lt.eq.gt"),
  nleq: define-sym("lt.eq.not"),
  leqq: define-sym("lt.equiv"),
  lessgtr: define-sym("lt.gt"),
  lneqq: define-sym("lt.nequiv"),
  nless: define-sym("lt.not"),
  lnsim: define-sym("lt.ntilde"),
  lesssim: define-sym("lt.tilde"),
  vartriangleleft: define-sym("lt.tri"),
  trianglelefteq: define-sym("lt.tri.eq"),
  ntrianglelefteq: define-sym("lt.tri.eq.not"),
  ntriangleleft: define-sym("lt.tri.not"),
  lll: define-sym("lt.triple"),
  approxeq: define-sym("approx.eq"),
  prec: define-sym("prec"),
  precapprox: define-sym("prec.approx"),
  preccurlyeq: define-sym("prec.eq"),
  npreceq: define-sym("prec.eq.not"),
  precnapprox: define-sym("prec.napprox"),
  nprec: define-sym("prec.not"),
  precnsim: define-sym("prec.ntilde"),
  precsim: define-sym("prec.tilde"),
  succ: define-sym("succ"),
  succapprox: define-sym("succ.approx"),
  succcurlyeq: define-sym("succ.eq"),
  nsucceq: define-sym("succ.eq.not"),
  succnapprox: define-sym("succ.napprox"),
  nsucc: define-sym("succ.not"),
  succnsim: define-sym("succ.ntilde"),
  succsim: define-sym("succ.tilde"),
  equiv: define-sym("equiv"),
  propto: define-sym("prop"),
  varnothing: define-sym("nothing"),
  setminus: define-sym("without"),
  And: define-sym("amp"),
  bigcirc: define-sym("circle.stroked.big"),
  smallsetminus: define-sym("without"),
  complement: define-sym("complement"),
  ni: define-sym("in.rev"),
  Subset: define-sym("subset.double"),
  nsubseteq: define-sym("subset.eq.not"),
  sqsubseteq: define-sym("subset.eq.sq"),
  subsetneq: define-sym("subset.neq"),
  supset: define-sym("supset"),
  Supset: define-sym("supset.double"),
  supseteq: define-sym("supset.eq"),
  nsupseteq: define-sym("supset.eq.not"),
  sqsupseteq: define-sym("supset.eq.sq"),
  supsetneq: define-sym("supset.neq"),
  bigcup: define-sym("union.big"),
  Cup: define-sym("union.double"),
  uplus: define-sym("union.plus"),
  biguplus: define-sym("union.plus.big"),
  sqcup: define-sym("union.sq"),
  bigsqcup: define-sym("union.sq.big"),
  bigcap: define-sym("sect.big"),
  Cap: define-sym("sect.double"),
  sqcap: define-sym("sect.sq"),
  partial: define-sym("diff"),
  nabla: define-sym("nabla"),
  coprod: define-sym("product.co"),
  forall: define-sym("forall"),
  exists: define-sym("exists"),
  nexists: define-sym("exists.not"),
  top: define-sym("top"),
  bot: define-sym("bot"),
  neg: define-sym("not"),
  land: define-sym("and"),
  bigwedge: define-sym("and.big"),
  curlywedge: define-sym("and.curly"),
  vee: define-sym("or"),
  bigvee: define-sym("or.big"),
  curlyvee: define-sym("or.curly"),
  models: define-sym("models"),
  therefore: define-sym("therefore"),
  because: define-sym("because"),
  blacksquare: define-sym("qed"),
  circ: define-sym("compose"),
  multimap: define-sym("multimap"),
  mid: define-sym("divides"),
  nmid: define-sym("divides.not"),
  wr: define-sym("wreath"),
  parallel: define-sym("parallel"),
  nparallel: define-sym("parallel.not"),
  perp: define-sym("perp"),
  Join: define-sym("join"),
  pounds: define-sym("pound"),
  clubsuit: define-sym("suit.club"),
  spadesuit: define-sym("suit.spade"),
  bullet: define-sym("bullet"),
  circledcirc: define-sym("circle.nested"),
  rhd: define-sym("triangle.stroked.r"),
  lhd: define-sym("triangle.stroked.l"),
  bigtriangleup: define-sym("triangle.stroked.t"),
  bigtriangledown: define-sym("triangle.stroked.b"),
  triangleright: define-sym("triangle.stroked.small.r"),
  triangledown: define-sym("triangle.stroked.small.b"),
  triangleleft: define-sym("triangle.stroked.small.l"),
  vartriangle: define-sym("triangle.stroked.small.t"),
  square: define-sym("square.stroked"),
  Diamond: define-sym("diamond.stroked"),
  diamond: define-sym("diamond.stroked.small"),
  lozenge: define-sym("lozenge.stroked"),
  blacklozenge: define-sym("lozenge.filled"),
  bigstar: define-sym("star.stroked"),
  longmapsto: define-sym("arrow.r.long.bar"),
  nRightarrow: define-sym("arrow.r.double.not"),
  hookrightarrow: define-sym("arrow.r.hook"),
  looparrowright: define-sym("arrow.r.loop"),
  nrightarrow: define-sym("arrow.r.not"),
  rightsquigarrow: define-sym("arrow.r.squiggly"),
  rightarrowtail: define-sym("arrow.r.tail"),
  Rrightarrow: define-sym("arrow.r.triple"),
  twoheadrightarrow: define-sym("arrow.r.twohead"),
  nLeftarrow: define-sym("arrow.l.double.not"),
  hookleftarrow: define-sym("arrow.l.hook"),
  looparrowleft: define-sym("arrow.l.loop"),
  nleftarrow: define-sym("arrow.l.not"),
  leftarrowtail: define-sym("arrow.l.tail"),
  Lleftarrow: define-sym("arrow.l.triple"),
  twoheadleftarrow: define-sym("arrow.l.twohead"),
  uparrow: define-sym("arrow.t"),
  Uparrow: define-sym("arrow.t.double"),
  downarrow: define-sym("arrow.b"),
  Downarrow: define-sym("arrow.b.double"),
  iff: define-sym("arrow.l.r.double.long"),
  nLeftrightarrow: define-sym("arrow.l.r.double.not"),
  nleftrightarrow: define-sym("arrow.l.r.not"),
  leftrightsquigarrow: define-sym("arrow.l.r.wave"),
  updownarrow: define-sym("arrow.t.b"),
  Updownarrow: define-sym("arrow.t.b.double"),
  nearrow: define-sym("arrow.tr"),
  searrow: define-sym("arrow.br"),
  nwarrow: define-sym("arrow.tl"),
  swarrow: define-sym("arrow.bl"),
  circlearrowleft: define-sym("arrow.ccw"),
  curvearrowleft: define-sym("arrow.ccw.half"),
  circlearrowright: define-sym("arrow.cw"),
  curvearrowright: define-sym("arrow.cw.half"),
  rightrightarrows: define-sym("arrows.rr"),
  leftleftarrows: define-sym("arrows.ll"),
  upuparrows: define-sym("arrows.tt"),
  downdownarrows: define-sym("arrows.bb"),
  leftrightarrows: define-sym("arrows.lr"),
  rightleftarrows: define-sym("arrows.rl"),
  rightharpoonup: define-sym("harpoon.rt"),
  rightharpoondown: define-sym("harpoon.rb"),
  leftharpoonup: define-sym("harpoon.lt"),
  leftharpoondown: define-sym("harpoon.lb"),
  upharpoonleft: define-sym("harpoon.tl"),
  upharpoonright: define-sym("harpoon.tr"),
  downharpoonleft: define-sym("harpoon.bl"),
  downharpoonright: define-sym("harpoon.br"),
  leftrightharpoons: define-sym("harpoons.ltrb"),
  rightleftharpoons: define-sym("harpoons.rtlb"),
  vdash: define-sym("tack.r"),
  nvdash: define-sym("tack.r.not"),
  vDash: define-sym("tack.r.double"),
  nvDash: define-sym("tack.r.double.not"),
  dashv: define-sym("tack.l"),
  hbar: define-sym("planck.reduce"),
  hslash: define-sym("planck.reduce"),
  Re: define-sym("Re"),
  Im: define-sym("Im"),
  imath: define-sym("dotless.i"),
  jmath: define-sym("dotless.j"),
  lbrace: define-sym("\\{"),
  rbrace: define-sym("\\}"),
  doteq: define-sym("≐"),
  Vdash: define-sym("⊩"),
  Doteq: define-sym("≑"),
  smallsmile: define-sym("⌣"),
  Vvdash: define-sym("⊪"),
  gnapprox: define-sym("⪊"),
  ngeqslant: define-sym("gt.eq.not"),
  precneqq: define-sym("prec.nequiv"),
  gneq: define-sym("⪈"),
  xleftarrow: cmd1,
  xrightarrow: cmd1,
  xLeftarrow: cmd1,
  xRightarrow: cmd1,
  xleftrightarrow: cmd1,
  xLeftrightarrow: cmd1,
  xhookleftarrow: cmd1,
  xhookrightarrow: cmd1,
  xtwoheadleftarrow: cmd1,
  xtwoheadrightarrow: cmd1,
  xleftharpoonup: cmd1,
  xrightharpoonup: cmd1,
  xleftharpoondown: cmd1,
  xrightharpoondown: cmd1,
  xleftrightharpoons: cmd1,
  xrightleftharpoons: cmd1,
  xtofrom: cmd1,
  xmapsto: cmd1,
  xlongequal: cmd1,
  pmod: cmd1,
  // Matrices
  matrix: matrix-env,
  pmatrix: matrix-env,
  bmatrix: matrix-env,
  Bmatrix: matrix-env,
  vmatrix: matrix-env,
  Vmatrix: matrix-env,
  smallmatrix: matrix-env,
  array: define-matrix-env(1, alias: "mitexarray"),
  subarray: define-matrix-env(1, alias: "mitexarray"),
  // Environments
  aligned: normal-env,
  align: define-env(none, alias: "aligned"),
  "align*": define-env(none, alias: "aligned"),
  equation: define-env(none, alias: "aligned"),
  "equation*": define-env(none, alias: "aligned"),
  split: define-env(none, alias: "aligned"),
  gather: define-env(none, alias: "aligned"),
  gathered: define-env(none, alias: "aligned"),
  cases: (
    kind: "env",
    args: ( kind: "none" ),
    ctx_feature: ( kind: "is-cases" ),
    alias: "cases",
  ),
  rcases: (
    kind: "env",
    args: ( kind: "none" ),
    ctx_feature: ( kind: "is-cases" ),
    alias: "rcases",
  ),
  // Specials
  label: define-cmd(1, alias: "mitexlabel"),
  operatorname: cmd1,
  operatornamewithlimits: cmd1,
  "operatorname*": define-cmd(1, alias: "operatornamewithlimits"),
  vspace: cmd1,
  hspace: cmd1,
  text: cmd1,
  textnormal: cmd1,
  textbf: cmd1,
  textrm: cmd1,
  textit: cmd1,
  textsf: cmd1,
  texttt: cmd1,
  over: define-infix-cmd("frac"),
  sqrt: define-glob-cmd("{,b}t", "mitexsqrt"),
)

#let latex-std = (name: "latex-std", spec: (commands: spec));
#define-package(latex-std)
